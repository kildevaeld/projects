// Code generated by protoc-gen-go.
// source: projects.proto
// DO NOT EDIT!

package messages

import proto "github.com/kildevaeld/projects/Godeps/_workspace/src/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "github.com/kildevaeld/projects/Godeps/_workspace/src/golang.org/x/net/context"
	grpc "github.com/kildevaeld/projects/Godeps/_workspace/src/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProjectQuery struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ProjectQuery) Reset()         { *m = ProjectQuery{} }
func (m *ProjectQuery) String() string { return proto.CompactTextString(m) }
func (*ProjectQuery) ProtoMessage()    {}

type Project struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}

func init() {
	proto.RegisterType((*ProjectQuery)(nil), "messages.ProjectQuery")
	proto.RegisterType((*Project)(nil), "messages.Project")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Projects service

type ProjectsClient interface {
	Get(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (*Project, error)
	Create(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	List(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (Projects_ListClient, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) Get(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/messages.Projects/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Create(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/messages.Projects/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) List(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (Projects_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Projects_serviceDesc.Streams[0], c.cc, "/messages.Projects/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Projects_ListClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type projectsListClient struct {
	grpc.ClientStream
}

func (x *projectsListClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Projects service

type ProjectsServer interface {
	Get(context.Context, *ProjectQuery) (*Project, error)
	Create(context.Context, *Project) (*Project, error)
	List(*ProjectQuery, Projects_ListServer) error
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProjectsServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Projects_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProjectsServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Projects_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectsServer).List(m, &projectsListServer{stream})
}

type Projects_ListServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type projectsListServer struct {
	grpc.ServerStream
}

func (x *projectsListServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Projects_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Projects_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Projects_List_Handler,
			ServerStreams: true,
		},
	},
}
