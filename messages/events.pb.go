// Code generated by protoc-gen-go.
// source: events.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	events.proto
	projects.proto
	resource.proto

It has these top-level messages:
	EventQuery
	Event
	ProjectQuery
	Project
	ResourceType
	ResourceQuery
	ResourceCreate
	Resource
*/
package messages

import proto "github.com/kildevaeld/projects/Godeps/_workspace/src/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "github.com/kildevaeld/projects/Godeps/_workspace/src/golang.org/x/net/context"
	grpc "github.com/kildevaeld/projects/Godeps/_workspace/src/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventQuery struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *EventQuery) Reset()         { *m = EventQuery{} }
func (m *EventQuery) String() string { return proto.CompactTextString(m) }
func (*EventQuery) ProtoMessage()    {}

type Event struct {
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}

func init() {
	proto.RegisterType((*EventQuery)(nil), "messages.EventQuery")
	proto.RegisterType((*Event)(nil), "messages.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Events service

type EventsClient interface {
	GetEvents(ctx context.Context, in *EventQuery, opts ...grpc.CallOption) (Events_GetEventsClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) GetEvents(ctx context.Context, in *EventQuery, opts ...grpc.CallOption) (Events_GetEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/messages.Events/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventsGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventsGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Events service

type EventsServer interface {
	GetEvents(*EventQuery, Events_GetEventsServer) error
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).GetEvents(m, &eventsGetEventsServer{stream})
}

type Events_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventsGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventsGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _Events_GetEvents_Handler,
			ServerStreams: true,
		},
	},
}
